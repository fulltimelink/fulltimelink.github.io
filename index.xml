<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fulltime Link</title>
    <link>https://fulltimelink.github.io/</link>
    <description>Recent content on Fulltime Link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 01 Apr 2022 16:11:47 +0800</lastBuildDate><atom:link href="https://fulltimelink.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>各语言的一些对比</title>
      <link>https://fulltimelink.github.io/post/%E5%90%84%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Fri, 01 Apr 2022 16:11:47 +0800</pubDate>
      
      <guid>https://fulltimelink.github.io/post/%E5%90%84%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AF%B9%E6%AF%94/</guid>
      <description>最近对接的事比较多，java 摸鱼 学习 一直没有进度
担心前一段学习白费，把收集到的各语言的一些对比整理了一下
顺便熟悉一下markdown的table语法 -_-
   项/语言 GO PHP Java     基本类型 整数类型：uint8/16/32/64 , int8/16/32/64 , int浮点数类型：float32，float64复数类型：complex64, complex128字符类型：byte, rune字符串类型： string布尔类型：bool指针类型：uintptr 标量类型：bool, string, integer, float 符合数据类型：array, object特殊类型： resource, null 整数类型：byte，short，int，long浮点数类型：float，double字符类型：char布尔类型：boolean字符串类型: String (注意是大写S ， 为引用类型)   强制类型转换 int64(v) (int)$v intval($v) settype($v, &amp;quot;int&amp;quot;) (int)v   多行字符串 ss := `&amp;hellip;.` 结束反引号不需要顶格 $ss= &amp;laquo;&amp;lt;EOT&amp;hellip;EOT;结束标记(EOT)需要顶格 var ss = &amp;quot;&amp;quot;&amp;quot;&amp;hellip;&amp;quot;&amp;quot;&amp;quot;;结束三个双引号不需要顶格   输入输出 fmt echo Scanner sc = new Scanner(System.</description>
    </item>
    
    <item>
      <title>Kratos Rpc尝试的二三事</title>
      <link>https://fulltimelink.github.io/post/kratos-rpc%E5%B0%9D%E8%AF%95%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B/</link>
      <pubDate>Thu, 31 Mar 2022 08:14:27 +0800</pubDate>
      
      <guid>https://fulltimelink.github.io/post/kratos-rpc%E5%B0%9D%E8%AF%95%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B/</guid>
      <description>起  经过这一段时间对kratos框架的了解，也算大致熟悉了整体的使用流程，以及DDD的一些思想。 恰巧我台有个c端转码的业务，为了不让机房里的那些T4闲置落灰，遂决定用kratos把玩一番。
 析  既然是使用GPU转码，就先确认GPU转码的可行性。由于我台目前整体已经推成了容器化的部署， 所以测试Dockerfile的内容大概就是如下三步：
 加载GPU官方基础镜像-(动辄几个G，确实大&amp;hellip;) 添加ffmpeg源码进行编译安装-(源安装的ffmpeg不能使用GPU) 添加自己转码服务程序   坑1  等了半天，镜像终于制作好，本机没有好的显卡，也为了和生产环境保持一致，推到服务器进行 测试，打tag， 推harbor, rancher部署（指定调度到带GPU的node）。exec进去看看驱动 是否一切正常：
[root@transcode-6b9c5cb9f6-98hht app]# nvidia-smi Thu Mar 31 08:38:28 2022 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 440.56 Driver Version: 440.56 CUDA Version: 10.2 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GRID T4-8Q On | 00000000:00:0A.</description>
    </item>
    
    <item>
      <title>kubectl cp 的限制</title>
      <link>https://fulltimelink.github.io/post/kubectl-cp-%E7%9A%84%E9%99%90%E5%88%B6/</link>
      <pubDate>Tue, 29 Mar 2022 12:55:56 +0800</pubDate>
      
      <guid>https://fulltimelink.github.io/post/kubectl-cp-%E7%9A%84%E9%99%90%E5%88%B6/</guid>
      <description>kubectl cp  本地文件复制到pod内  kubectl cp D:/1/example.txt podname:/var/www/html/public/a.txt kubectl cp example.txt podname:public/a.txt  本地及远程地址都可使用绝对路径或者相对路径
  其中本地地址的相对目录为当前kubectl执行命令的目录
  远程地址的目录为pod workdir的目录
  pod内文件复制到本地  kubectl cp podname:public/a.txt b.txt  本地及远程地址都只能使用相对路径
  而且本地的路径不能有层级
 </description>
    </item>
    
    <item>
      <title>Rebegin</title>
      <link>https://fulltimelink.github.io/post/rebegin/</link>
      <pubDate>Tue, 29 Mar 2022 10:22:40 +0800</pubDate>
      
      <guid>https://fulltimelink.github.io/post/rebegin/</guid>
      <description>志始于此，愿达于彼 fmt.Println(&amp;#34;Hello World! again!&amp;#34;) </description>
    </item>
    
  </channel>
</rss>
