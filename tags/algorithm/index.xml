<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on Fulltime Link</title>
    <link>https://fulltimelink.github.io/tags/algorithm/</link>
    <description>Recent content in algorithm on Fulltime Link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 13 Apr 2022 08:54:18 +0800</lastBuildDate><atom:link href="https://fulltimelink.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>梳理一下排序算法</title>
      <link>https://fulltimelink.github.io/post/%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8B%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 13 Apr 2022 08:54:18 +0800</pubDate>
      
      <guid>https://fulltimelink.github.io/post/%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8B%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>最近看java的教程，对比了一下，发现java对原生类型的逆向排序支持较弱不够友好
php 有rsort krsort arsort
go 有 sort.Reverse 而且原生类型到封装类型也有方便的转换 sort.IntSlice([]int)
java Collections.reverseOrder 则并不适用于原生类型
于是，再复习一下基本用不到快忘完的排序算法：
以降序为例 选择排序  内循环内不交换，只查找目标元素，然后外循环内将目标元素与其应该在的位置进行交换 双循环  内循环 第次循环找出当前剩下元素中的最大值的索引  循环范围 1 - n   外循环 将内循环找出的最大元素与当前遍历的元素交换  循环范围 0 - (n-1)      // -- @# 选择排序 public void SelectDescSort(int[] args){  for(int i=0;i&amp;lt;args.length-1;i++){  int index =i;  for(int j=i+1;j&amp;lt;args.length;j++){  if(args[index] &amp;lt; args[j]){  index =j;  }  }  int tmp = args[i];  args[i] = args[index];  args[index] = tmp;  } } 冒泡排序  每次内循环都进行交换，内循环结束目标元素所在位置即为预期位置 双循环  内循环 将外循环控制的当前队列中的元素两两比较，将目标元素移动到尾部  循环范围 0 - (n-外循环索引-1)   外循环 控制当前比较的元素是第几个  循环范围 0 - (n-1)      // -- @# 冒泡排序 public void BubbleDescSort(int[] args){  if(2 &amp;gt; args.</description>
    </item>
    
  </channel>
</rss>
