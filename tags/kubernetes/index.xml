<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Fulltime Link</title>
    <link>https://fulltimelink.github.io/tags/kubernetes/</link>
    <description>Recent content in kubernetes on Fulltime Link</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 29 Apr 2022 14:32:51 +0800</lastBuildDate><atom:link href="https://fulltimelink.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rancher下kratos服务”内存泄漏”的一次排查</title>
      <link>https://fulltimelink.github.io/post/rancher%E4%B8%8Bkratos%E6%9C%8D%E5%8A%A1%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Fri, 29 Apr 2022 14:32:51 +0800</pubDate>
      
      <guid>https://fulltimelink.github.io/post/rancher%E4%B8%8Bkratos%E6%9C%8D%E5%8A%A1%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E4%B8%80%E6%AC%A1%E6%8E%92%E6%9F%A5/</guid>
      <description>书接上文，服务上线后，经过一段时间的运行后发现rancher监控上内存有点异常
疑似”内存泄漏“ 明天就五-了，这不是找事么_-_ [虽然因为疫情不能出去逛]
上图：
中间内存有点过山车，进pod看看实际占用了多少
持久内存才20M+ 虚拟内存才 700M+ 这和监控的内存（都TM x2 不止了）对不上啊，好吧，上神器 pprof
goroutine稳如泰山~
但是allocs有点高，且有一直在增长的趋势
web看一下
这俩货咋能占这多内存呢，看看这俩函数是哪来的~
注册中心 nacos client的sdk，莫非有泄漏 ？？？ , 我K 那其他服务岂不是也中招了&amp;hellip;
赶紧看了一下另外一个同样使用nacos client的服务(alpine系统镜像)
??????? 再来看下有问题的服务(centos镜像)
这对不上啊，从pprof上看，nacos client的这俩函数 都是占用了差不多的alloc_space &amp;hellip; 懵逼
上gc trace，触发几次业务，看看到底是不是GC不过来
稳如泰山 -_-，这就想不明白了
梯子Google百度一顿搜索，无果~
到目前为止总结一下：
  kubelet监控内存使用的是cAdvisor 的 container_memory_working_set_bytes 指标 ，它统计的是(RSS+CACHE)
 如果是统计指标的事，那上面的alpine和centos下内存统计应该一样， 现在说不通啊    还有另外一个不同，那就是两个服务的系统不一样，alpine属于精简系统， centos大家就比较熟悉了
 本来想着把centos那个服务换成alpine， 但是nvidia的GPU基础镜像是没有alpine的，但是有ubuntu的    TODO 为了验证是否是系统的差异引起的统计问题，下一步只能把centos换成ubuntu试一试了，但是我比较懒，明天都五一了，嘿嘿，五一后再说吧~ 可能就忘了-_-
   参考链接：万恶的markdown不能new window
1.13 Go 应用内存占用太多，让排查？（VSZ篇）</description>
    </item>
    
    <item>
      <title>kubectl cp 的限制</title>
      <link>https://fulltimelink.github.io/post/kubectl-cp-%E7%9A%84%E9%99%90%E5%88%B6/</link>
      <pubDate>Tue, 29 Mar 2022 12:55:56 +0800</pubDate>
      
      <guid>https://fulltimelink.github.io/post/kubectl-cp-%E7%9A%84%E9%99%90%E5%88%B6/</guid>
      <description>kubectl cp  本地文件复制到pod内  kubectl cp D:/1/example.txt podname:/var/www/html/public/a.txt kubectl cp example.txt podname:public/a.txt  本地及远程地址都可使用绝对路径或者相对路径
  其中本地地址的相对目录为当前kubectl执行命令的目录
  远程地址的目录为pod workdir的目录
  pod内文件复制到本地  kubectl cp podname:public/a.txt b.txt  本地及远程地址都只能使用相对路径
  而且本地的路径不能有层级
 </description>
    </item>
    
  </channel>
</rss>
